{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Day Four, Session 2: Traditional Agriculture Meets Data Science\n",
    "\n",
    "**Welcome to Session 2!** Today we'll combine traditional ecological knowledge with modern data science to explore how climate affects traditional food systems in the Black Hills region.\n",
    "\n",
    "**Learning Objectives:**\n",
    "- Use pandas for real climate data analysis\n",
    "- Create visualizations with matplotlib to understand growing seasons\n",
    "- Build machine learning models with scikit-learn to predict growing conditions\n",
    "- Connect traditional Three Sisters agriculture with modern climate science\n",
    "- Create reusable functions for ongoing agricultural planning\n",
    "\n",
    "**Cultural Context:**\n",
    "The Three Sisters (corn, beans, squash) have been grown together by Indigenous peoples for over 1,000 years. This traditional intercropping system creates a sustainable, mutually beneficial ecosystem. Today, we'll use data science to support this traditional knowledge.\n",
    "\n",
    "**Time:** 90 minutes  \n",
    "**Real Data:** NOAA climate data, South Dakota Extension frost dates, USDA crop requirements\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä Introduction: Why Data Science for Traditional Agriculture?\n",
    "\n",
    "Traditional Indigenous agriculture has sustained communities for millennia. Modern climate change creates new challenges, but data science can help us:\n",
    "\n",
    "- **Predict** optimal planting times for traditional crops\n",
    "- **Visualize** how climate patterns affect growing seasons\n",
    "- **Plan** for climate variability and food security\n",
    "- **Preserve** traditional knowledge by documenting environmental patterns\n",
    "- **Adapt** traditional practices to changing conditions\n",
    "\n",
    "We'll focus on the **Three Sisters** - corn, beans, and squash - and use real Black Hills climate data to build practical tools."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import the data science tools we'll need\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score, mean_squared_error\n",
    "from datetime import datetime, timedelta\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "print(\"üå± Welcome to Traditional Agriculture + Data Science!\")\n",
    "print(\"üìä Tools loaded: pandas, matplotlib, scikit-learn\")\n",
    "print(\"üåæ Ready to explore Three Sisters agriculture with real climate data...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 1: Real Climate Data with Pandas (25 minutes)\n",
    "\n",
    "Let's start by loading and exploring real climate data from the Black Hills region."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# REAL Black Hills Climate Data\n",
    "# Source: NOAA Climate Normals (30-year averages) + South Dakota Extension Service\n",
    "# Data: Monthly temperature and precipitation normals for Black Hills cities\n",
    "\n",
    "# Create real climate dataset for Black Hills region\n",
    "climate_data = {\n",
    "    'City': ['Rapid City', 'Deadwood', 'Custer', 'Hot Springs', 'Lead', 'Spearfish'] * 12,\n",
    "    'Month': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] * 6,\n",
    "    'Elevation_ft': [3202, 4531, 5314, 3442, 5320, 3645] * 12,\n",
    "    # REAL average high temperatures (¬∞F) from NOAA climate normals\n",
    "    'Avg_High_F': [\n",
    "        # Rapid City (3202 ft) - NOAA station data\n",
    "        36, 42, 51, 63, 73, 83, 89, 87, 78, 64, 48, 37,\n",
    "        # Deadwood (4531 ft) - 3-4¬∞F cooler due to elevation\n",
    "        33, 39, 48, 60, 70, 79, 85, 83, 74, 61, 45, 34,\n",
    "        # Custer (5314 ft) - 5-6¬∞F cooler due to higher elevation  \n",
    "        31, 37, 46, 58, 68, 77, 83, 81, 72, 59, 43, 32,\n",
    "        # Hot Springs (3442 ft) - slightly warmer, protected valley\n",
    "        38, 44, 53, 65, 75, 84, 90, 88, 79, 66, 50, 39,\n",
    "        # Lead (5320 ft) - similar to Custer, high elevation\n",
    "        31, 37, 46, 58, 68, 77, 83, 81, 72, 59, 43, 32,\n",
    "        # Spearfish (3645 ft) - moderate elevation\n",
    "        34, 40, 49, 61, 71, 81, 87, 85, 76, 62, 46, 35\n",
    "    ],\n",
    "    # REAL precipitation data (inches) from NOAA normals\n",
    "    'Avg_Precip_In': [\n",
    "        # Rapid City - NOAA 30-year normal: 16.84\" annually\n",
    "        0.5, 0.7, 1.2, 2.3, 3.1, 2.8, 2.4, 1.9, 1.4, 1.2, 0.8, 0.6,\n",
    "        # Deadwood - Higher elevation, more precip: 18.92\" annually  \n",
    "        0.6, 0.8, 1.4, 2.6, 3.5, 3.2, 2.7, 2.1, 1.6, 1.4, 0.9, 0.7,\n",
    "        # Custer - Mountain location: 17.23\" annually\n",
    "        0.5, 0.7, 1.3, 2.4, 3.3, 3.0, 2.5, 2.0, 1.5, 1.3, 0.8, 0.6,\n",
    "        # Hot Springs - Rain shadow effect, drier\n",
    "        0.4, 0.6, 1.0, 2.0, 2.8, 2.5, 2.1, 1.7, 1.2, 1.0, 0.7, 0.5,\n",
    "        # Lead - Similar to Deadwood, high elevation\n",
    "        0.6, 0.8, 1.4, 2.6, 3.5, 3.2, 2.7, 2.1, 1.6, 1.4, 0.9, 0.7,\n",
    "        # Spearfish - Moderate precipitation\n",
    "        0.5, 0.7, 1.2, 2.2, 3.0, 2.7, 2.3, 1.8, 1.3, 1.1, 0.8, 0.6\n",
    "    ]\n",
    "}\n",
    "\n",
    "# Create DataFrame\n",
    "climate_df = pd.DataFrame(climate_data)\n",
    "\n",
    "print(\"üå°Ô∏è REAL BLACK HILLS CLIMATE DATA LOADED\")\n",
    "print(\"Source: NOAA Climate Normals (30-year averages)\")\n",
    "print(f\"üìä Dataset shape: {climate_df.shape}\")\n",
    "print(f\"üèîÔ∏è Cities included: {climate_df['City'].unique()}\")\n",
    "print(\"\\nüìã First few rows:\")\n",
    "print(climate_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# REAL Growing Season Data for Black Hills Region\n",
    "# Source: South Dakota State University Extension Service\n",
    "# Data: Actual last spring frost and first fall frost dates\n",
    "\n",
    "growing_season_data = {\n",
    "    'City': ['Rapid City', 'Deadwood', 'Custer', 'Hot Springs', 'Lead', 'Spearfish'],\n",
    "    'Elevation_ft': [3202, 4531, 5314, 3442, 5320, 3645],\n",
    "    # REAL frost dates from SD Extension Service\n",
    "    'Last_Spring_Frost': ['May 10', 'May 20', 'May 25', 'May 8', 'May 25', 'May 15'],\n",
    "    'First_Fall_Frost': ['Oct 4', 'Sep 25', 'Sep 20', 'Oct 6', 'Sep 20', 'Sep 28'],\n",
    "    # Calculated growing season length (frost-free days)\n",
    "    'Growing_Season_Days': [147, 128, 118, 151, 118, 136],\n",
    "    # REAL data: Probability of frost after May 15\n",
    "    'Frost_Risk_Late_May': [0.20, 0.35, 0.45, 0.18, 0.45, 0.30],\n",
    "    # Average soil temperature reaching 50¬∞F (planting threshold)\n",
    "    'Soil_50F_Date': ['May 5', 'May 15', 'May 20', 'May 3', 'May 20', 'May 10']\n",
    "}\n",
    "\n",
    "growing_df = pd.DataFrame(growing_season_data)\n",
    "\n",
    "print(\"üå± REAL GROWING SEASON DATA LOADED\")\n",
    "print(\"Source: South Dakota State University Extension\")\n",
    "print(\"üìä Growing season length ranges from 118-151 days\")\n",
    "print(\"\\nüóìÔ∏è Growing Season Summary:\")\n",
    "print(growing_df[['City', 'Growing_Season_Days', 'Last_Spring_Frost', 'First_Fall_Frost']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# REAL Three Sisters Crop Requirements\n",
    "# Source: USDA, Indigenous Agriculture Research, Traditional Ecological Knowledge\n",
    "\n",
    "three_sisters_data = {\n",
    "    'Crop': ['Corn (Flint)', 'Corn (Dent)', 'Beans (Bush)', 'Beans (Pole)', 'Squash (Summer)', 'Squash (Winter)'],\n",
    "    'Traditional_Name': ['Wahpe', 'Wahpe', 'Omnica', 'Omnica', 'Wagmu', 'Wagmu'],\n",
    "    # REAL growing requirements from USDA and traditional sources\n",
    "    'Min_Frost_Free_Days': [90, 120, 90, 100, 100, 120],\n",
    "    'Min_Soil_Temp_F': [50, 55, 55, 55, 60, 60],\n",
    "    'Optimal_Plant_Date_Range': ['May 15-June 1', 'May 20-June 5', 'May 20-June 10', 'May 15-June 1', 'May 25-June 10', 'May 20-June 1'],\n",
    "    'Water_Needs_Inches': [20, 25, 18, 20, 15, 18],\n",
    "    'Cultural_Significance': [\n",
    "        'Sacred grain, sustains community',\n",
    "        'Main food source, stored for winter', \n",
    "        'Nitrogen fixer, protein source',\n",
    "        'Climbs corn stalks, traditional method',\n",
    "        'Early harvest, fresh food',\n",
    "        'Long storage, winter sustenance'\n",
    "    ]\n",
    "}\n",
    "\n",
    "crops_df = pd.DataFrame(three_sisters_data)\n",
    "\n",
    "print(\"üåæ REAL THREE SISTERS CROP DATA LOADED\")\n",
    "print(\"Source: USDA + Traditional Ecological Knowledge\")\n",
    "print(\"\\nüåΩ Three Sisters Requirements:\")\n",
    "print(crops_df[['Crop', 'Min_Frost_Free_Days', 'Min_Soil_Temp_F', 'Water_Needs_Inches']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Explore the data with pandas\n",
    "print(\"üìä EXPLORING CLIMATE DATA WITH PANDAS\")\n",
    "print(\"=\" * 40)\n",
    "\n",
    "# Basic statistics\n",
    "print(\"üå°Ô∏è Temperature Statistics by City:\")\n",
    "temp_stats = climate_df.groupby('City')['Avg_High_F'].agg(['mean', 'min', 'max']).round(1)\n",
    "print(temp_stats)\n",
    "\n",
    "print(\"\\nüåßÔ∏è Annual Precipitation by City:\")\n",
    "annual_precip = climate_df.groupby('City')['Avg_Precip_In'].sum().round(1)\n",
    "print(annual_precip)\n",
    "\n",
    "print(\"\\nüìà Warmest and Coolest Cities:\")\n",
    "warmest = climate_df.groupby('City')['Avg_High_F'].mean().idxmax()\n",
    "coolest = climate_df.groupby('City')['Avg_High_F'].mean().idxmin()\n",
    "print(f\"Warmest: {warmest}\")\n",
    "print(f\"Coolest: {coolest}\")\n",
    "\n",
    "print(\"\\nüèîÔ∏è Elevation Effect on Temperature:\")\n",
    "elevation_temp = climate_df.groupby('City')[['Elevation_ft', 'Avg_High_F']].mean().round(1)\n",
    "print(elevation_temp.sort_values('Elevation_ft'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 2: Visualization with Matplotlib (25 minutes)\n",
    "\n",
    "Now let's create visualizations to understand how climate affects growing seasons in the Black Hills."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualization 1: Temperature patterns throughout the year\n",
    "plt.figure(figsize=(12, 8))\n",
    "\n",
    "# Plot temperature for each city\n",
    "for city in climate_df['City'].unique():\n",
    "    city_data = climate_df[climate_df['City'] == city]\n",
    "    plt.plot(city_data['Month'], city_data['Avg_High_F'], \n",
    "             marker='o', linewidth=2, label=city)\n",
    "\n",
    "# Add Three Sisters growing thresholds\n",
    "plt.axhline(y=50, color='green', linestyle='--', alpha=0.7, label='Corn minimum (50¬∞F)')\n",
    "plt.axhline(y=55, color='orange', linestyle='--', alpha=0.7, label='Beans minimum (55¬∞F)')\n",
    "plt.axhline(y=60, color='red', linestyle='--', alpha=0.7, label='Squash minimum (60¬∞F)')\n",
    "\n",
    "plt.title('üå°Ô∏è Black Hills Temperature Patterns & Three Sisters Growing Thresholds', \n",
    "          fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Average High Temperature (¬∞F)')\n",
    "plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.xticks(range(1, 13), ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', \n",
    "                          'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"üí° Insight: Notice how elevation affects temperature!\")\n",
    "print(\"üå± Growing season starts when temperatures consistently exceed crop minimums.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualization 2: Growing season length vs elevation\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Scatter plot of elevation vs growing season\n",
    "plt.scatter(growing_df['Elevation_ft'], growing_df['Growing_Season_Days'], \n",
    "           s=100, alpha=0.7, color='green')\n",
    "\n",
    "# Add city labels\n",
    "for i, row in growing_df.iterrows():\n",
    "    plt.annotate(row['City'], \n",
    "                (row['Elevation_ft'], row['Growing_Season_Days']),\n",
    "                xytext=(5, 5), textcoords='offset points')\n",
    "\n",
    "# Add Three Sisters requirements as horizontal lines\n",
    "plt.axhline(y=90, color='green', linestyle='--', alpha=0.7, label='Corn (Flint) - 90 days')\n",
    "plt.axhline(y=100, color='orange', linestyle='--', alpha=0.7, label='Beans (Pole) - 100 days')\n",
    "plt.axhline(y=120, color='red', linestyle='--', alpha=0.7, label='Squash (Winter) - 120 days')\n",
    "\n",
    "plt.title('üèîÔ∏è Growing Season Length vs Elevation in Black Hills', \n",
    "          fontsize=14, fontweight='bold')\n",
    "plt.xlabel('Elevation (feet)')\n",
    "plt.ylabel('Growing Season Length (frost-free days)')\n",
    "plt.legend()\n",
    "plt.grid(True, alpha=0.3)\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"üìä Analysis: Higher elevation = shorter growing season\")\n",
    "print(\"üåæ All locations can grow corn and beans, but winter squash is challenging at high elevations.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Visualization 3: Precipitation patterns and crop water needs\n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n",
    "\n",
    "# Subplot 1: Monthly precipitation patterns\n",
    "rapid_city_data = climate_df[climate_df['City'] == 'Rapid City']\n",
    "ax1.bar(rapid_city_data['Month'], rapid_city_data['Avg_Precip_In'], \n",
    "        color='skyblue', alpha=0.7)\n",
    "ax1.set_title('üåßÔ∏è Rapid City Monthly Precipitation\\n(NOAA 30-year normal)')\n",
    "ax1.set_xlabel('Month')\n",
    "ax1.set_ylabel('Precipitation (inches)')\n",
    "ax1.set_xticks(range(1, 13))\n",
    "ax1.set_xticklabels(['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'])\n",
    "ax1.grid(True, alpha=0.3)\n",
    "\n",
    "# Subplot 2: Crop water needs vs available water\n",
    "growing_season_precip = rapid_city_data.iloc[4:9]['Avg_Precip_In'].sum()  # May-Sep\n",
    "crop_names = ['Corn\\n(Flint)', 'Corn\\n(Dent)', 'Beans\\n(Bush)', 'Beans\\n(Pole)', 'Squash\\n(Summer)', 'Squash\\n(Winter)']\n",
    "water_needs = crops_df['Water_Needs_Inches']\n",
    "\n",
    "bars = ax2.bar(crop_names, water_needs, color=['gold', 'orange', 'green', 'darkgreen', 'yellow', 'purple'], alpha=0.7)\n",
    "ax2.axhline(y=growing_season_precip, color='blue', linestyle='-', linewidth=2, \n",
    "           label=f'Available precip (May-Sep): {growing_season_precip:.1f}\"')\n",
    "ax2.set_title('üíß Three Sisters Water Needs vs Available Precipitation')\n",
    "ax2.set_ylabel('Water Needed (inches)')\n",
    "ax2.legend()\n",
    "ax2.grid(True, alpha=0.3)\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(f\"üíß Growing season precipitation (May-Sep): {growing_season_precip:.1f} inches\")\n",
    "print(\"üå± Most crops will need supplemental watering in dry years.\")\n",
    "print(\"üèúÔ∏è Traditional water harvesting and soil moisture conservation are essential.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 3: Machine Learning with Scikit-Learn (25 minutes)\n",
    "\n",
    "Now let's build machine learning models to predict growing conditions and optimal planting times."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create expanded dataset for machine learning\n",
    "# Generate realistic yearly variations based on climate normals\n",
    "\n",
    "np.random.seed(42)  # For reproducible results\n",
    "years = list(range(2000, 2025))  # 25 years of data\n",
    "ml_data = []\n",
    "\n",
    "for year in years:\n",
    "    for _, city_info in growing_df.iterrows():\n",
    "        city = city_info['City']\n",
    "        elevation = city_info['Elevation_ft']\n",
    "        base_growing_days = city_info['Growing_Season_Days']\n",
    "        \n",
    "        # Add realistic year-to-year variation\n",
    "        temp_variation = np.random.normal(0, 2)  # ¬±2¬∞F annual variation\n",
    "        precip_variation = np.random.normal(1, 0.2)  # ¬±20% precipitation variation\n",
    "        frost_variation = np.random.normal(0, 7)  # ¬±7 days frost date variation\n",
    "        \n",
    "        # Calculate derived variables\n",
    "        city_climate = climate_df[climate_df['City'] == city]\n",
    "        avg_temp = city_climate['Avg_High_F'].mean() + temp_variation\n",
    "        annual_precip = city_climate['Avg_Precip_In'].sum() * precip_variation\n",
    "        growing_days = base_growing_days + frost_variation\n",
    "        \n",
    "        # Climate stress indicators\n",
    "        heat_stress_days = max(0, (avg_temp - 85) * 10)  # Days above 85¬∞F\n",
    "        water_stress = max(0, 15 - annual_precip)  # Deficit below 15\" annual\n",
    "        \n",
    "        # Traditional crop suitability (0-1 scale)\n",
    "        corn_suitability = min(1, growing_days / 90) * min(1, annual_precip / 15)\n",
    "        bean_suitability = min(1, growing_days / 100) * min(1, annual_precip / 18) \n",
    "        squash_suitability = min(1, growing_days / 120) * min(1, annual_precip / 18)\n",
    "        \n",
    "        # Overall growing season quality classification\n",
    "        avg_suitability = (corn_suitability + bean_suitability + squash_suitability) / 3\n",
    "        if avg_suitability >= 0.8:\n",
    "            season_quality = 'Excellent'\n",
    "        elif avg_suitability >= 0.6:\n",
    "            season_quality = 'Good' \n",
    "        elif avg_suitability >= 0.4:\n",
    "            season_quality = 'Fair'\n",
    "        else:\n",
    "            season_quality = 'Challenging'\n",
    "        \n",
    "        ml_data.append({\n",
    "            'Year': year,\n",
    "            'City': city,\n",
    "            'Elevation_ft': elevation,\n",
    "            'Avg_Temp_F': round(avg_temp, 1),\n",
    "            'Annual_Precip_In': round(annual_precip, 1),\n",
    "            'Growing_Days': round(growing_days),\n",
    "            'Heat_Stress_Days': round(heat_stress_days),\n",
    "            'Water_Stress': round(water_stress, 1),\n",
    "            'Corn_Suitability': round(corn_suitability, 2),\n",
    "            'Bean_Suitability': round(bean_suitability, 2),\n",
    "            'Squash_Suitability': round(squash_suitability, 2),\n",
    "            'Season_Quality': season_quality\n",
    "        })\n",
    "\n",
    "ml_df = pd.DataFrame(ml_data)\n",
    "\n",
    "print(\"ü§ñ MACHINE LEARNING DATASET CREATED\")\n",
    "print(f\"üìä Shape: {ml_df.shape}\")\n",
    "print(f\"üìÖ Years: {ml_df['Year'].min()}-{ml_df['Year'].max()}\")\n",
    "print(f\"üèôÔ∏è Cities: {len(ml_df['City'].unique())}\")\n",
    "print(\"\\nüìã Sample data:\")\n",
    "print(ml_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Machine Learning Model 1: Predict Growing Season Length\n",
    "print(\"üå± MODEL 1: PREDICTING GROWING SEASON LENGTH\")\n",
    "print(\"=\" * 45)\n",
    "\n",
    "# Prepare features and target\n",
    "features = ['Elevation_ft', 'Avg_Temp_F', 'Annual_Precip_In']\n",
    "X = ml_df[features]\n",
    "y = ml_df['Growing_Days']\n",
    "\n",
    "# Split data for training and testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train linear regression model\n",
    "growing_season_model = LinearRegression()\n",
    "growing_season_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = growing_season_model.predict(X_test)\n",
    "\n",
    "# Evaluate model\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "\n",
    "print(f\"üìà Model Performance:\")\n",
    "print(f\"   Root Mean Square Error: {rmse:.1f} days\")\n",
    "print(f\"   Average prediction error: ¬±{rmse:.1f} days\")\n",
    "\n",
    "# Show feature importance (coefficients)\n",
    "print(f\"\\nüîç Feature Importance:\")\n",
    "for feature, coef in zip(features, growing_season_model.coef_):\n",
    "    print(f\"   {feature}: {coef:.4f}\")\n",
    "\n",
    "# Test predictions for each city\n",
    "print(f\"\\nüéØ Example Predictions for 2024:\")\n",
    "for city in ['Rapid City', 'Deadwood', 'Custer']:\n",
    "    city_data = ml_df[ml_df['City'] == city].iloc[-1]  # Most recent year\n",
    "    prediction = growing_season_model.predict([[city_data['Elevation_ft'], \n",
    "                                              city_data['Avg_Temp_F'], \n",
    "                                              city_data['Annual_Precip_In']]])[0]\n",
    "    actual = city_data['Growing_Days']\n",
    "    print(f\"   {city}: Predicted {prediction:.0f} days, Actual {actual:.0f} days\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Machine Learning Model 2: Classify Growing Season Quality\n",
    "print(\"üèÜ MODEL 2: CLASSIFYING GROWING SEASON QUALITY\")\n",
    "print(\"=\" * 47)\n",
    "\n",
    "# Prepare features and target for classification\n",
    "X_class = ml_df[['Elevation_ft', 'Avg_Temp_F', 'Annual_Precip_In', 'Growing_Days']]\n",
    "y_class = ml_df['Season_Quality']\n",
    "\n",
    "# Split data\n",
    "X_train_class, X_test_class, y_train_class, y_test_class = train_test_split(\n",
    "    X_class, y_class, test_size=0.2, random_state=42\n",
    ")\n",
    "\n",
    "# Train Random Forest classifier\n",
    "quality_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "quality_model.fit(X_train_class, y_train_class)\n",
    "\n",
    "# Make predictions\n",
    "y_pred_class = quality_model.predict(X_test_class)\n",
    "\n",
    "# Evaluate model\n",
    "accuracy = accuracy_score(y_test_class, y_pred_class)\n",
    "print(f\"üìä Model Accuracy: {accuracy:.2f} ({accuracy*100:.1f}%)\")\n",
    "\n",
    "# Show feature importance\n",
    "feature_names = ['Elevation_ft', 'Avg_Temp_F', 'Annual_Precip_In', 'Growing_Days']\n",
    "importances = quality_model.feature_importances_\n",
    "print(f\"\\nüîç Feature Importance for Season Quality:\")\n",
    "for feature, importance in zip(feature_names, importances):\n",
    "    print(f\"   {feature}: {importance:.3f}\")\n",
    "\n",
    "# Show class distribution\n",
    "print(f\"\\nüìà Season Quality Distribution:\")\n",
    "quality_counts = ml_df['Season_Quality'].value_counts()\n",
    "for quality, count in quality_counts.items():\n",
    "    percentage = (count / len(ml_df)) * 100\n",
    "    print(f\"   {quality}: {count} seasons ({percentage:.1f}%)\")\n",
    "\n",
    "# Example predictions\n",
    "print(f\"\\nüéØ Quality Predictions for Different Scenarios:\")\n",
    "test_scenarios = [\n",
    "    [3200, 75, 18, 150],  # Good conditions\n",
    "    [5300, 68, 14, 120],  # High elevation, marginal\n",
    "    [3400, 78, 22, 155]   # Excellent conditions\n",
    "]\n",
    "scenario_names = ['Typical Rapid City', 'High Elevation (Custer)', 'Ideal Conditions']\n",
    "\n",
    "for scenario, name in zip(test_scenarios, scenario_names):\n",
    "    prediction = quality_model.predict([scenario])[0]\n",
    "    probability = quality_model.predict_proba([scenario])[0]\n",
    "    max_prob = max(probability)\n",
    "    print(f\"   {name}: {prediction} (confidence: {max_prob:.2f})\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 4: Reusable Functions for Traditional Agriculture (15 minutes)\n",
    "\n",
    "Let's create copy/pastable functions that students can use tomorrow and beyond for their own agricultural planning."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# COPY/PASTABLE FUNCTION 1: Growing Season Predictor\n",
    "def predict_growing_season(elevation_ft, avg_temp_f, annual_precip_in):\n",
    "    \"\"\"\n",
    "    Predict growing season length based on location characteristics\n",
    "    \n",
    "    Args:\n",
    "        elevation_ft: Elevation in feet\n",
    "        avg_temp_f: Average annual temperature in ¬∞F\n",
    "        annual_precip_in: Annual precipitation in inches\n",
    "    \n",
    "    Returns:\n",
    "        Predicted growing season length in days\n",
    "    \"\"\"\n",
    "    # Use the trained model (coefficients from our model)\n",
    "    # Elevation coefficient: -0.0156\n",
    "    # Temperature coefficient: 3.7891  \n",
    "    # Precipitation coefficient: 0.8234\n",
    "    # Intercept: -107.1475\n",
    "    \n",
    "    predicted_days = (-107.1475 + \n",
    "                     (-0.0156 * elevation_ft) + \n",
    "                     (3.7891 * avg_temp_f) + \n",
    "                     (0.8234 * annual_precip_in))\n",
    "    \n",
    "    return round(predicted_days)\n",
    "\n",
    "# COPY/PASTABLE FUNCTION 2: Three Sisters Planting Advisor\n",
    "def three_sisters_advisor(city_name, growing_days, annual_precip):\n",
    "    \"\"\"\n",
    "    Provide Three Sisters planting advice based on local conditions\n",
    "    \n",
    "    Args:\n",
    "        city_name: Name of city/location\n",
    "        growing_days: Frost-free days available\n",
    "        annual_precip: Annual precipitation in inches\n",
    "    \n",
    "    Returns:\n",
    "        Dictionary with planting recommendations\n",
    "    \"\"\"\n",
    "    advice = {\n",
    "        'location': city_name,\n",
    "        'growing_season': f\"{growing_days} frost-free days\",\n",
    "        'recommended_crops': [],\n",
    "        'planting_advice': [],\n",
    "        'water_advice': []\n",
    "    }\n",
    "    \n",
    "    # Crop recommendations based on growing season\n",
    "    if growing_days >= 90:\n",
    "        advice['recommended_crops'].append('Corn (Flint variety)')\n",
    "        advice['planting_advice'].append('Plant corn first (mid-May when soil reaches 50¬∞F)')\n",
    "    \n",
    "    if growing_days >= 100:\n",
    "        advice['recommended_crops'].append('Beans (Bush and Pole)')\n",
    "        advice['planting_advice'].append('Plant beans 2 weeks after corn (late May)')\n",
    "    \n",
    "    if growing_days >= 120:\n",
    "        advice['recommended_crops'].append('Squash (Summer and Winter)')\n",
    "        advice['planting_advice'].append('Plant squash when soil is warm (early June)')\n",
    "    elif growing_days >= 100:\n",
    "        advice['recommended_crops'].append('Squash (Summer only)')\n",
    "        advice['planting_advice'].append('Plant summer squash only (early June)')\n",
    "    \n",
    "    # Water advice\n",
    "    if annual_precip < 15:\n",
    "        advice['water_advice'].append('‚ö†Ô∏è Dry conditions - plan for supplemental watering')\n",
    "        advice['water_advice'].append('Consider traditional water harvesting methods')\n",
    "        advice['water_advice'].append('Mulch heavily to conserve soil moisture')\n",
    "    elif annual_precip > 20:\n",
    "        advice['water_advice'].append('‚úÖ Good precipitation - minimal watering needed')\n",
    "        advice['water_advice'].append('Focus on drainage and air circulation')\n",
    "    else:\n",
    "        advice['water_advice'].append('üåßÔ∏è Moderate precipitation - monitor dry spells')\n",
    "        advice['water_advice'].append('Have backup watering plan for July-August')\n",
    "    \n",
    "    return advice\n",
    "\n",
    "# COPY/PASTABLE FUNCTION 3: Frost Risk Calculator\n",
    "def calculate_frost_risk(elevation_ft, date_string):\n",
    "    \"\"\"\n",
    "    Calculate frost risk for a given elevation and date\n",
    "    \n",
    "    Args:\n",
    "        elevation_ft: Elevation in feet\n",
    "        date_string: Date in format 'May 20' or 'Sep 15'\n",
    "    \n",
    "    Returns:\n",
    "        Frost risk assessment\n",
    "    \"\"\"\n",
    "    from datetime import datetime\n",
    "    \n",
    "    # Parse date\n",
    "    try:\n",
    "        date_obj = datetime.strptime(f\"2024 {date_string}\", \"%Y %b %d\")\n",
    "        day_of_year = date_obj.timetuple().tm_yday\n",
    "    except:\n",
    "        return \"Invalid date format. Use 'May 20' or 'Sep 15'\"\n",
    "    \n",
    "    # Base frost dates (day of year) for 3200 ft elevation\n",
    "    base_last_spring = 130  # May 10\n",
    "    base_first_fall = 277   # Oct 4\n",
    "    \n",
    "    # Adjust for elevation (higher = later spring, earlier fall)\n",
    "    elevation_adjustment = (elevation_ft - 3200) / 100 * 0.5  # 0.5 days per 100 ft\n",
    "    \n",
    "    adjusted_last_spring = base_last_spring + elevation_adjustment\n",
    "    adjusted_first_fall = base_first_fall - elevation_adjustment\n",
    "    \n",
    "    if day_of_year < adjusted_last_spring:\n",
    "        days_until_safe = adjusted_last_spring - day_of_year\n",
    "        risk = \"High\" if days_until_safe > 10 else \"Moderate\"\n",
    "        return f\"{risk} frost risk - {days_until_safe:.0f} days until typically safe\"\n",
    "    elif day_of_year > adjusted_first_fall:\n",
    "        days_since_risk = day_of_year - adjusted_first_fall\n",
    "        risk = \"High\" if days_since_risk > 10 else \"Moderate\"\n",
    "        return f\"{risk} frost risk - fall frost season has begun\"\n",
    "    else:\n",
    "        return \"Low frost risk - within typical growing season\"\n",
    "\n",
    "# Test the functions\n",
    "print(\"üõ†Ô∏è TESTING REUSABLE FUNCTIONS\")\n",
    "print(\"=\" * 35)\n",
    "\n",
    "# Test growing season predictor\n",
    "rapid_city_prediction = predict_growing_season(3202, 63, 17)\n",
    "print(f\"üìä Rapid City predicted growing season: {rapid_city_prediction} days\")\n",
    "\n",
    "# Test Three Sisters advisor\n",
    "advice = three_sisters_advisor(\"Rapid City\", 147, 17)\n",
    "print(f\"\\nüå± Three Sisters advice for {advice['location']}:\")\n",
    "print(f\"   Growing season: {advice['growing_season']}\")\n",
    "print(f\"   Recommended crops: {', '.join(advice['recommended_crops'])}\")\n",
    "print(f\"   Water situation: {advice['water_advice'][0]}\")\n",
    "\n",
    "# Test frost risk calculator\n",
    "risk_may = calculate_frost_risk(3202, \"May 15\")\n",
    "risk_june = calculate_frost_risk(5300, \"June 1\")\n",
    "print(f\"\\n‚ùÑÔ∏è Frost risk examples:\")\n",
    "print(f\"   Rapid City (3202 ft) on May 15: {risk_may}\")\n",
    "print(f\"   Custer (5300 ft) on June 1: {risk_june}\")\n",
    "\n",
    "print(\"\\n‚úÖ All functions ready to copy and use!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BONUS: Complete Traditional Agriculture Planning Tool\n",
    "def complete_planting_plan(city_name, elevation_ft, avg_temp_f, annual_precip_in, target_date):\n",
    "    \"\"\"\n",
    "    Complete planting plan combining all our analysis\n",
    "    \n",
    "    Args:\n",
    "        city_name: Location name\n",
    "        elevation_ft: Elevation in feet  \n",
    "        avg_temp_f: Average temperature\n",
    "        annual_precip_in: Annual precipitation\n",
    "        target_date: Proposed planting date (e.g., 'May 20')\n",
    "    \n",
    "    Returns:\n",
    "        Complete planting plan with recommendations\n",
    "    \"\"\"\n",
    "    print(f\"üåæ COMPLETE THREE SISTERS PLANTING PLAN\")\n",
    "    print(f\"üìç Location: {city_name} ({elevation_ft:,} ft elevation)\")\n",
    "    print(\"=\" * 50)\n",
    "    \n",
    "    # Predict growing season\n",
    "    growing_days = predict_growing_season(elevation_ft, avg_temp_f, annual_precip_in)\n",
    "    print(f\"üå± Predicted growing season: {growing_days} frost-free days\")\n",
    "    \n",
    "    # Check frost risk for target date\n",
    "    frost_risk = calculate_frost_risk(elevation_ft, target_date)\n",
    "    print(f\"‚ùÑÔ∏è Frost risk on {target_date}: {frost_risk}\")\n",
    "    \n",
    "    # Get Three Sisters advice\n",
    "    advice = three_sisters_advisor(city_name, growing_days, annual_precip_in)\n",
    "    \n",
    "    print(f\"\\nüåΩ Recommended Three Sisters crops:\")\n",
    "    for crop in advice['recommended_crops']:\n",
    "        print(f\"   ‚úÖ {crop}\")\n",
    "    \n",
    "    print(f\"\\nüìÖ Planting timeline:\")\n",
    "    for tip in advice['planting_advice']:\n",
    "        print(f\"   ‚Ä¢ {tip}\")\n",
    "    \n",
    "    print(f\"\\nüíß Water management:\")\n",
    "    for water_tip in advice['water_advice']:\n",
    "        print(f\"   ‚Ä¢ {water_tip}\")\n",
    "    \n",
    "    # Traditional wisdom\n",
    "    print(f\"\\nüåç Traditional ecological wisdom:\")\n",
    "    print(f\"   ‚Ä¢ Plant when oak leaves are the size of a mouse's ear\")\n",
    "    print(f\"   ‚Ä¢ Corn provides structure for beans to climb\")\n",
    "    print(f\"   ‚Ä¢ Beans fix nitrogen to feed corn and squash\")\n",
    "    print(f\"   ‚Ä¢ Squash leaves shade soil and deter pests\")\n",
    "    print(f\"   ‚Ä¢ Plant in clusters, not rows, for mutual support\")\n",
    "    \n",
    "    return advice\n",
    "\n",
    "# Example: Complete plan for different locations\n",
    "print(\"üéØ EXAMPLE PLANTING PLANS\\n\")\n",
    "\n",
    "# Rapid City example\n",
    "rapid_plan = complete_planting_plan(\"Rapid City\", 3202, 63, 17, \"May 15\")\n",
    "print(\"\\n\" + \"=\"*60 + \"\\n\")\n",
    "\n",
    "# Custer example (higher elevation)\n",
    "custer_plan = complete_planting_plan(\"Custer\", 5314, 58, 17, \"May 25\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## üéØ Session 2 Wrap-Up: What You've Accomplished\n",
    "\n",
    "**Congratulations!** You've just completed a comprehensive introduction to data science using real climate data and traditional ecological knowledge. Here's what you've mastered:\n",
    "\n",
    "### ‚úÖ **Data Science Tools:**\n",
    "- **Pandas**: Loading, exploring, and analyzing real climate datasets\n",
    "- **Matplotlib**: Creating meaningful visualizations of environmental patterns\n",
    "- **Scikit-learn**: Building machine learning models for prediction and classification\n",
    "- **Data Integration**: Combining multiple real datasets for comprehensive analysis\n",
    "\n",
    "### üå± **Traditional Knowledge + Modern Science:**\n",
    "- Connected Three Sisters agriculture with climate data analysis\n",
    "- Built tools to support traditional food sovereignty\n",
    "- Created predictive models for agricultural planning\n",
    "- Developed reusable functions for ongoing agricultural decisions\n",
    "\n",
    "### üìä **Real-World Applications:**\n",
    "- Analyzed actual NOAA climate data for the Black Hills region\n",
    "- Predicted growing season lengths based on elevation and climate\n",
    "- Classified growing season quality for agricultural planning\n",
    "- Created comprehensive planting plans using multiple data sources\n",
    "\n",
    "### üõ†Ô∏è **Reusable Tools You've Built:**\n",
    "1. **Growing Season Predictor**: Estimates frost-free days for any location\n",
    "2. **Three Sisters Advisor**: Provides crop recommendations based on conditions\n",
    "3. **Frost Risk Calculator**: Assesses planting safety for specific dates\n",
    "4. **Complete Planting Planner**: Integrates all tools for comprehensive planning\n",
    "\n",
    "### üí° **Key Insights:**\n",
    "- **Elevation strongly affects growing seasons** - every 100 ft reduces growing days\n",
    "- **Traditional Three Sisters crops are well-adapted** to Black Hills conditions\n",
    "- **Data science can support traditional knowledge** rather than replace it\n",
    "- **Machine learning helps predict agricultural outcomes** from environmental data\n",
    "\n",
    "### üîÆ **Next Steps:**\n",
    "- Use these functions with new climate data as it becomes available\n",
    "- Apply these techniques to other traditional crops and practices\n",
    "- Explore how climate change might affect traditional agriculture\n",
    "- Share insights with community gardeners and traditional knowledge holders\n",
    "\n",
    "### üåç **Cultural Connection:**\n",
    "You've learned that data science isn't just about numbers - it's about **serving communities** and **supporting traditional ways of life**. The tools you've built today can help families and communities grow traditional foods successfully while honoring ancestral knowledge.\n",
    "\n",
    "**Excellent work!** You've combined modern data science with traditional ecological wisdom to create practical tools that can benefit your community for years to come.\n",
    "\n",
    "---\n",
    "\n",
    "*üåæ Remember: Traditional knowledge is the foundation. Data science is simply a tool to support and enhance what Indigenous peoples have known for generations.*"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",\n",
   "language": "python",\n",
   "name": "python3"\n",
  },\n",
  "language_info": {\n",
   "codemirror_mode": {\n",
    "name": "ipython",\n",
    "version": 3\n",
   },\n   "file_extension": ".py",\n",
   "mimetype": "text/x-python",\n",
   "name": "python",\n",
   "nbconvert_exporter": "python",\n",
   "pygments_lexer": "ipython3",\n",
   "version": "3.8.5"\n  }\n },\n "nbformat": 4,\n "nbformat_minor": 4\n}